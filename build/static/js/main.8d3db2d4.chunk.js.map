{"version":3,"sources":["Artimg.js","ImageColumn.js","App.js","index.js"],"names":["Artimg","props","useState","show","setShow","details","setDetails","useEffect","img","Image","onload","src","className","alt","descr","onClick","x","href","download","id","idx","ImageColumn","imgs","map","item","i","key","title","parseData","arr","startArr","lenSA","length","grupedArr","div","parseInt","temp","slice","push","App","dataurl","setdataurl","a","fetch","res","json","data","getData","ReactDOM","render","document","getElementById"],"mappings":"0LAEe,SAASA,EAAOC,GAAQ,IAAD,EACZC,oBAAS,GADG,mBAC7BC,EAD6B,KACvBC,EADuB,OAENF,oBAAS,GAFH,mBAE7BG,EAF6B,KAEpBC,EAFoB,KAapC,OATAC,qBAAU,WACR,IAAIC,EAAM,IAAIC,MAEdD,EAAIE,OAAS,WACXN,GAAQ,IAEVI,EAAIG,IAAMV,EAAMU,MACf,IAGD,yBAAKC,UAAWT,EAAO,eAAiB,QAEtC,yBAAKQ,IAAKV,EAAMU,IAAKE,IAAKZ,EAAMa,QAEhC,yBAAKF,UAAU,WACb,0BAAMA,UAAU,UAAUG,QAAS,kBAAMT,GAAW,SAACU,GAAD,OAAQA,OAC1D,uBAAGJ,UAAU,eADf,YAGA,uBAAGA,UAAU,SAASK,KAAMhB,EAAMU,IAAKO,UAAQ,GAC7C,uBAAGN,UAAU,mBADf,gBAGA,yBAAKA,UAAWP,EAAU,cAAgB,OAAQc,GAAIlB,EAAMmB,KAC1D,0BAAMR,UAAU,YAAYX,EAAMa,OAClC,0BAAMF,UAAU,UAAhB,YACA,0BAAMA,UAAU,YAAhB,aC3BK,SAASS,EAAYpB,GAClC,OACE,yBAAKW,UAAU,eAEXX,EAAMqB,KAAKC,KAAI,SAACC,EAAMC,GACpB,OAAO,kBAACzB,EAAD,CAAQ0B,IAAKD,EAAGL,IAAKnB,EAAMmB,IAAMK,EAAIA,EAAGd,IAAG,iDAA4Ca,EAAKb,KAAOG,MAAOU,EAAKG,YCLhI,IAAMC,EAAY,SAACC,GAQjB,IAPA,IAAIC,EAAWD,EAEXE,EAAQD,EAASE,OACjBC,EAAY,GAGZC,EAAMC,SAASJ,EAFL,GAGLN,EAAI,EAAGA,EAHF,EAGeA,IAAK,CAChC,IAAIW,EAAON,EAASO,MAAMZ,EAAIS,GAAMT,EAAI,GAAKS,GAC7CD,EAAUK,KAAKF,GAEjB,OAAOH,GAsDMM,MAnDf,WAAgB,IAAD,EACiBrC,mBAAS,IAD1B,mBACNsC,EADM,KACGC,EADH,OAEWvC,oBAAS,GAFpB,mBAENC,EAFM,KAEAC,EAFA,KAeb,OAZAG,qBAAU,YACK,uCAAG,8BAAAmC,EAAA,sEACEC,MAAM,2CADR,cACVC,EADU,gBAEGA,EAAIC,OAFP,cAEVC,EAFU,OAGdL,EAAWb,EAAUkB,EAAKxB,OAC1BlB,GAAQ,GAJM,kBAMP0C,GANO,2CAAH,qDAQbC,KACC,IAGD,yBAAKnC,UAAU,OACb,gCACE,+CAEF,yBAAKA,UAAU,aAAf,siBASE,2BACE,uBAAGK,KAAK,kEAAR,8BAIF,2BACE,uBAAGA,KAAK,gGAAR,4BAKJ,yBAAKL,UAAU,UACZT,EACGqC,EAAQjB,KAAI,SAACC,EAAMC,GACjB,OAAO,kBAACJ,EAAD,CAAaK,IAAKD,EAAGL,IAAKK,EAAGH,KAAME,OAE5C,QC3DZwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.8d3db2d4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nexport default function Artimg(props) {\r\n  const [show, setShow] = useState(false)\r\n  const [details, setDetails] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let img = new Image()\r\n\r\n    img.onload = () => {\r\n      setShow(true)\r\n    }\r\n    img.src = props.src\r\n  }, [])\r\n\r\n  return (\r\n    <div className={show ? 'imgContainer' : 'hide'}>\r\n      {/*  <div className={'imgContainer'}> */}\r\n      <img src={props.src} alt={props.descr} />\r\n\r\n      <div className=\"actions\">\r\n        <span className=\"details\" onClick={() => setDetails((x) => !x)}>\r\n          <i className=\"fa fa-info\"></i> Details\r\n        </span>\r\n        <a className=\"imgDwl\" href={props.src} download>\r\n          <i className=\"fa fa-download\"></i> Download HD\r\n        </a>\r\n        <div className={details ? 'showDetails' : 'hide'} id={props.idx}>\r\n          <span className=\"imgTitle\">{props.descr}</span>\r\n          <span className=\"imgOrg\">Orignal:</span>\r\n          <span className=\"imgStyle\">Style:</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Artimg from './Artimg'\r\n\r\nexport default function ImageColumn(props) {\r\n  return (\r\n    <div className=\"imageColumn\">\r\n      {\r\n        props.imgs.map((item, i) => {\r\n          return <Artimg key={i} idx={props.idx * i + i} src={`https://ramagg.com/deepartgallery/imgs/${item.src}`} descr={item.title} />\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React, { useState, useEffect } from 'react'\nimport ImageColumn from './ImageColumn'\n\nconst parseData = (arr) => {\n  let startArr = arr\n\n  let lenSA = startArr.length\n  let grupedArr = []\n  let columns = 4\n\n  let div = parseInt(lenSA / columns)\n  for (let i = 0; i < columns; i++) {\n    let temp = startArr.slice(i * div, (i + 1) * div)\n    grupedArr.push(temp)\n  }\n  return grupedArr\n}\n\nfunction App() {\n  const [dataurl, setdataurl] = useState([])\n  const [show, setShow] = useState(false)\n  useEffect(() => {\n    const getData = async () => {\n      let res = await fetch('https://ramagg.com/deepartgallery/imgs/')\n      let data = await res.json()\n      setdataurl(parseData(data.imgs))\n      setShow(true)\n\n      return data\n    }\n    getData()\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>DeepArtGallery</h1>\n      </header>\n      <div className=\"mainDescr\">\n        Neural style transfer is an optimization technique used to take two\n        images—a content image and a style reference image (such as an artwork\n        by a famous painter)—and blend them together so the output image looks\n        like the content image, but “painted” in the style of the style\n        reference image. This is implemented by optimizing the output image to\n        match the content statistics of the content image and the style\n        statistics of the style reference image. These statistics are extracted\n        from the images using a convolutional network.\n        <p>\n          <a href=\"https://www.tensorflow.org/tutorials/generative/style_transfer\">\n            Tensorflow Implementation\n          </a>\n        </p>\n        <p>\n          <a href=\"https://pytorch.org/tutorials/advanced/neural_style_tutorial.html?highlight=style%20transfer\">\n            PyTorch Implementation\n          </a>\n        </p>\n      </div>\n      <div className=\"artBox\">\n        {show\n          ? dataurl.map((item, i) => {\n              return <ImageColumn key={i} idx={i} imgs={item} />\n            })\n          : null}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}